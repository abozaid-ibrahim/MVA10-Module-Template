//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//  Template generated by Sally's Zone
//
import Foundation

// The default implementation provides disk cache caching policy
class VFUK___VARIABLE_productName:identifier___CachingPolicy: VFUKCachingPolicy, VFUKCachingPolicyProtocol {
    override init() {
        super.init()
		self.maxAge = Double(VFUKConfiguration.shared.getAppConfigAndSetting()?.startupSettings[<#ModuleMaxAge#>] ?? <#DefaultMaxAge#>)
		self.pollInterval = Double (VFUKConfiguration.shared.getAppConfigAndSetting()?.startupSettings[<#ModulePollInterval#>] ?? <#DefaultPollInterval#>)

    }
    func isMemoryCacheValid(_ lastApiCall: TimeInterval?) -> Bool {
        return false
    }

    func isDiskCacheValid(_ lastApiCall: TimeInterval?) -> Bool {
        if let lastCall = lastApiCall, let maxAge = self.maxAge {
            return VFUKCachePolicyHelper.shared.isValidData(lastApiCallTime: lastCall, maxAge: maxAge)
        }
        return false
    }

    func isKeychainCacheValid() -> Bool {
        return false
    }

    func shouldCallApi(_ lastApiCall: TimeInterval?) -> Bool {
        if let lastCall = lastApiCall, let maxAge = self.maxAge, let pollPeriod = self.pollInterval {
            return !VFUKCachePolicyHelper.shared.isUpToDateData(lastApiCallTime: lastCall, maxAge: maxAge, pollPeriod: pollPeriod)
        }
        return true
    }
    func shouldUseCache() -> Bool {
        return true
    }

    func shouldUseMemoryCache() -> Bool {
        return false
    }

    func shouldUseDiskCache() -> Bool {
        return true
    }

    func shouldUseKeychainCache() -> Bool {
        return false
    }

}
