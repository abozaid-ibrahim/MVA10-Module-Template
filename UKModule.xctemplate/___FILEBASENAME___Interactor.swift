//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//  Template generated by Sally's Zone
//


import Foundation
import AirshipKit
import RxSwift
import RxCocoa

class VFUK___VARIABLE_productName:identifier___Interactor: VFUKBaseInteractor, VFUK___VARIABLE_productName:identifier___InteractorProtocol {

	private let dispatcher: VFUK___VARIABLE_productName:identifier___DispatcherProtocol
	private let cachingPolicy: VFUK___VARIABLE_productName:identifier___CachingPolicy = VFUK___VARIABLE_productName:identifier___CachingPolicy()

	private var currentDataStatus: DataStatus?
	private var lastDataStatus: DataStatus?
	let <#model#>Subject: PublishRelay<VFUK___VARIABLE_productName:identifier___Model> = PublishRelay()
    /// Creates and returns a new Interactor
	init(dispatcher: VFUK___VARIABLE_productName:identifier___DispatcherProtocol) {
		self.dispatcher = dispatcher
        super.init()
    }

	private func get___VARIABLE_productName:identifier___Observable() -> Observable<Result<VFUK___VARIABLE_productName:identifier___Model>> {
		let request = VFUKBaseRequestFactory(apiMethod: VFUKAPIEndpoint.<#ApiEndPoint#>, httpMethod: .get, headers: self.getNeededHeader())
		let observable: Observable<Result<VFUK___VARIABLE_productName:identifier___Model>> = dispatcher.get___VARIABLE_productName:identifier___(cachePolicy: cachingPolicy, requestFactory: request, msisdn: VFUKConfiguration.shared.getCurrentAccount().activeMSISDN!)
		return observable
	}

	func get___VARIABLE_productName:identifier___() {
		self.get___VARIABLE_productName:identifier___Observable().subscribe(onNext: { [weak self] (result) in
			guard let `self` = self else { return }
			switch result {
			case .response(let <#model#>):
				// Only forward the model if there is no previous data or its state is uptodate & different from the one before it
				if self.lastDataStatus?.state == nil || (self.currentDataStatus?.state == .uptodate  && self.lastDataStatus?.state != self.currentDataStatus?.state) {
		            self.<#model#>Subject.accept(<#model#>)
				}
			case .dataStatus(let dataStatus):
				self.lastDataStatus = self.currentDataStatus
				self.currentDataStatus = dataStatus
				self.dataStatusSubject.accept(dataStatus)
			}
		}, onError: { [weak self] error in
			guard let `self` = self else { return }
			let error = VFUKBaseError(error: error)
			if error.code == VFUKErrorCode.eCareInvalidFullAccessToken.rawValue || error.code == VFUKErrorCode.expiredFullAccessToken.rawValue {
				self.baseErrorSubject.accept(error)
			} else {
				self.errorObservable.accept(VFUKBaseInteractor.getErrorScreen(error: error))
			}
		}).disposed(by: self.disposeBag)
	}
}
